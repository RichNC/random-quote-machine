{"version":3,"sources":["Quotes.js","Button.js","Colors.js","RandomQuote.js","App.js","serviceWorker.js","index.js"],"names":["quotes","text","author","Button","onClick","this","props","React","Component","colors","RandomQuote","state","quote","color","handleClick","bind","applyBackgroundColor","prevProps","prevState","Math","floor","random","length","setState","randomIndex","currentColor","document","querySelector","style","background","console","log","body","getElementById","quoteIndex","quoteAuthor","id","className","href","data-size","target","rel","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.9e242714.chunk.js","sourcesContent":["export let quotes = [{text: \"The greatest glory in living lies not in never falling, but in rising every time we fall.\", author: \"Nelson Mandela\"},\n                    {text: \"The way to get started is to quit talking and begin doing.\", author: \"Walt Disney\"},\n                    {text: \"Your time is limited, so don't waste it living someone else's life. Don't be trapped by dogma – which is living with the results of other people's thinking.\", author: \"Steve Jobs\"},\n                    {text: \"If life were predictable it would cease to be life, and be without flavor.\", author: \"Eleanor Roosevelt\"},\n                    {text: \"If you look at what you have in life, you'll always have more. If you look at what you don't have in life, you'll never have enough.\", author: \"Oprah Winfrey\"},\n                    {text: \"If you set your goals ridiculously high and it's a failure, you will fail above everyone else's success.\", author: \"James Cameron\"},\n                    {text: \"When you reach the end of your rope, tie a knot in it and hang on.\", author: \"Franklin D. Roosevelt\"},\n                    {text: \"In the end, it's not the years in your life that count. It's the life in your years.\", author: \"Abraham Lincoln\"},\n                    {text: \"Be yourself; everyone else is already taken.\", author: \"Oscar Wilde\"},\n                    {text: \"A fashion is nothing but an induced epidemic.\", author: \"George Bernard Shaw\"},\n                    {text: \"Progress is impossible without change, and those who cannot change their minds cannot change anything.\", author: \"George Bernard Shaw\"},\n                    {text: \"Live as if you were to die tomorrow. Learn as if you were to live forever.\", author: \"Mahatma Gandhi\"},\n                    {text: \"We must not allow other people’s limited perceptions to define us.\", author: \"Virginia Satir\"},\n                    {text: \"If you cannot do great things, do small things in a great way.\", author: \"Napoleon Hill\"},\n                    {text: \"Wise men speak because they have something to say; fools because they have to say something.\", author: \"Plato\"},\n                    {text: \"I want to feel what I feel. What's mine. Even if it's not happiness, whatever that means. Because you're all you've got.\", author: \"Toni Morrison\"},\n                    {text: \"I think we are well-advised to keep on nodding terms with the people we used to be, whether we find them attractive company or not. Otherwise they turn up unannounced and surprise us...\", author: \"Joan Didion\"},\n                    {text: \"When the going gets weird, the weird turn pro.\", author: \"Hunter S. Thompson\"},\n                    {text: \"The world breaks everyone, and afterward, some are strong at the broken places.\", author: \"Ernest Hemingway\"},\n                    {text: \"In a murderous time the heart breaks and breaks and lives by breaking.\", author: \"Stanley Kunitz\"},\n                    {text: \"You may say I lost everything, but I still had my Be-Dazzler.\", author: \"Lady Gaga\"}\n                    ]\n","import React from 'react';\n\nexport class Button extends React.Component {\n  render(){\n    return (\n      <button onClick={this.props.onClick}>New Quote</button>\n      )\n  }\n}\n","export let colors = ['#282C34','#628395', '#6B5B95', '#7b8896', '#699F7B', '#433E3F', '#445A87', '#2F4F4F', '#191970', '#483D8B']\n","import React from 'react';\nimport { quotes } from './Quotes';\nimport { Button } from './Button';\nimport { colors } from './Colors';\n\nexport class RandomQuote extends React.Component {\n  constructor(props){\n    super(props);\n    this.state={\n      quote: \"\",\n      color: \"#282C34\"\n    }\n    this.handleClick = this.handleClick.bind(this);\n  }\n  componentDidMount() {\n    this.applyBackgroundColor();\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    this.applyBackgroundColor();\n  }\n  randomIndex(){\n    let index = Math.floor(Math.random() * quotes.length);\n    return index;\n  }\n  handleClick(){\n    this.setState({\n      quote: quotes[this.randomIndex()].text\n    })\n  }\n  applyBackgroundColor(){\n    const currentColor = document.querySelector('body').style.background;\n    console.log(currentColor)\n    const color = colors[Math.floor(Math.random() * colors.length)]\n    document.body.style.background = color;\n    document.getElementById('quote-box').style.color = color;\n    document.querySelector('button').style.background = color;\n  }\n  render(){\n    let quoteIndex = this.randomIndex();\n    let quote = quotes[quoteIndex].text\n    let quoteAuthor = quotes[quoteIndex].author\n    return (\n      <div id=\"quote-box\">\n        <p id=\"text\"><i className=\"fas fa-quote-left\"></i> {quote} <i className=\"fas fa-quote-right\"></i></p>\n        <p id=\"author\">- {quoteAuthor}</p>\n        <div id=\"button\">\n          <div id=\"social-links\">\n            <a id=\"tweet-quote\" className=\"twitter-share-button\" href={\"https://twitter.com/intent/tweet?text=\" + quote + \" -\" + quoteAuthor} data-size=\"large\" target=\"_blank\" rel=\"noopener noreferrer\"><i className=\"fab fa-twitter-square\"></i></a>\n          </div>\n          <Button onClick={this.handleClick} id=\"new-quote\" />\n        </div>\n      </div>\n      )\n  }\n}\n\n","import React from 'react';\nimport './App.css';\nimport { RandomQuote } from './RandomQuote';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <RandomQuote />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}